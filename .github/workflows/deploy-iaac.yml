# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: 
      - "develop"
      - "staging"
      - "main"
  pull_request:
    branches: 
      - "develop"
      - "staging"
      - "main"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    name: Deploy Terraform resoruces
  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.4
        
    - name: Render terraform docs k8s and push changes back to PR
      uses: terraform-docs/gh-actions@main
      with:
        working-dir: ./modules/k8s/
        output-file: README.md
        output-method: inject
        git-push: "true"
        
    - name: Render terraform docs network and push changes back to PR
      uses: terraform-docs/gh-actions@main
      with:
        working-dir: ./modules/network/
        output-file: README.md
        output-method: inject
        git-push: "true"

    - name: Render terraform docs general and push changes back to PR
      uses: terraform-docs/gh-actions@main
      with:
        working-dir: ./
        output-file: README.md
        output-method: inject
        git-push: "true"

    - name: Install Terraform Visual
      run: npm install -g @terraform-visual/cli

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        terraform show -json plan.out > plan.json
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

    - name: Create Terraform Visual Report
      run: |
        terraform-visual --plan plan.json
        open terraform-visual-report/index.html
      
      # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan

      # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

      # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
        
        
